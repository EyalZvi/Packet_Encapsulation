//
// Generated file, do not edit! Created by nedtool 5.6 from IPv4.msg.
//

#ifndef __IPV4_M_H
#define __IPV4_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>IPv4.msg:17</tt> by nedtool.
 * <pre>
 * message IPv4Msg extends omnetpp::cPacket
 * {
 *     // For the protocol:
 *     int protocol_version;
 *     int IHL;
 *     int DSCP;
 *     int ECN;
 *     int Total_length;
 *     int identification;
 *     int flags;
 *     int fragment_offset;
 *     int TTL;
 *     int upper_protocol;
 *     int header_checksum;
 * 
 *     // Useful Variables:
 *     int src_ip;
 *     int dest_ip;
 * 
 *     // Note: As this is a simulation only useful variables are being initialized
 * }
 * </pre>
 */
class IPv4Msg : public ::omnetpp::cPacket
{
  protected:
    int protocol_version;
    int IHL;
    int DSCP;
    int ECN;
    int Total_length;
    int identification;
    int flags;
    int fragment_offset;
    int TTL;
    int upper_protocol;
    int header_checksum;
    int src_ip;
    int dest_ip;

  private:
    void copy(const IPv4Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv4Msg&);

  public:
    IPv4Msg(const char *name=nullptr, short kind=0);
    IPv4Msg(const IPv4Msg& other);
    virtual ~IPv4Msg();
    IPv4Msg& operator=(const IPv4Msg& other);
    virtual IPv4Msg *dup() const override {return new IPv4Msg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getProtocol_version() const;
    virtual void setProtocol_version(int protocol_version);
    virtual int getIHL() const;
    virtual void setIHL(int IHL);
    virtual int getDSCP() const;
    virtual void setDSCP(int DSCP);
    virtual int getECN() const;
    virtual void setECN(int ECN);
    virtual int getTotal_length() const;
    virtual void setTotal_length(int Total_length);
    virtual int getIdentification() const;
    virtual void setIdentification(int identification);
    virtual int getFlags() const;
    virtual void setFlags(int flags);
    virtual int getFragment_offset() const;
    virtual void setFragment_offset(int fragment_offset);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual int getUpper_protocol() const;
    virtual void setUpper_protocol(int upper_protocol);
    virtual int getHeader_checksum() const;
    virtual void setHeader_checksum(int header_checksum);
    virtual int getSrc_ip() const;
    virtual void setSrc_ip(int src_ip);
    virtual int getDest_ip() const;
    virtual void setDest_ip(int dest_ip);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPv4Msg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPv4Msg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __IPV4_M_H

